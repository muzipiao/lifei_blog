I"1<p>LLDB 是 Xcode 的默认调试器，支持在桌面和 iOS 设备和模拟器上调试 C，Objective-C 和 C ++。此文总结常用的一些 LLDB 命令。</p>

<h2 id="查看命令-print--po--v--frame-variable">查看命令 print &amp;&amp; po &amp;&amp; v &amp;&amp; frame variable</h2>

<p>查看打印变量的值可以使用print、po、v 和 frame variable 命令。如果打印的是简单类型，print、v 、frame variable 命令会列出简单类型的类型和值，po 只会打印值；如果是对象，会打印出对象指针地址，在 func 方法中设置断点，分别查看他们的值。如果想一次查看所有的变量值，输入<code class="language-plaintext highlighter-rouge">frame variable</code>命令即可。<code class="language-plaintext highlighter-rouge">frame v</code>是<code class="language-plaintext highlighter-rouge">frame variable</code>的简写，执行命令效果相同。</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 在 func 方法中设置断点</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">func</span><span class="p">{</span>
<span class="n">NSInteger</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">aStr</span> <span class="o">=</span> <span class="s">@"xyzm"</span><span class="p">;</span>
<span class="n">NSObject</span> <span class="o">*</span><span class="n">aObj</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSObject</span> <span class="nf">alloc</span><span class="p">]</span> <span class="nf">init</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<p>分别使用 LLDB 的 print、po 和 v 命令效果如下：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>lldb<span class="o">)</span> print a
<span class="o">(</span>NSInteger<span class="o">)</span> <span class="nv">$0</span> <span class="o">=</span> 8
<span class="o">(</span>lldb<span class="o">)</span> print aStr
<span class="o">(</span>__NSCFConstantString <span class="k">*</span><span class="o">)</span> <span class="nv">$1</span> <span class="o">=</span> 0x000000010027a368 @<span class="s2">"xyzm"</span>
<span class="o">(</span>lldb<span class="o">)</span> print aObj
<span class="o">(</span>NSObject <span class="k">*</span><span class="o">)</span> <span class="nv">$2</span> <span class="o">=</span> 0x0000000170016350
<span class="o">(</span>lldb<span class="o">)</span> po a
8

<span class="o">(</span>lldb<span class="o">)</span> po aStr
xyzm

<span class="o">(</span>lldb<span class="o">)</span> po aObj
&lt;NSObject: 0x170016350&gt;

<span class="o">(</span>lldb<span class="o">)</span> v a
<span class="o">(</span>NSInteger<span class="o">)</span> a <span class="o">=</span> 8
<span class="o">(</span>lldb<span class="o">)</span> v aStr
<span class="o">(</span>__NSCFConstantString <span class="k">*</span><span class="o">)</span> aStr <span class="o">=</span> 0x000000010027a368 @<span class="s2">"xyzm"</span>
<span class="o">(</span>lldb<span class="o">)</span> v aObj
<span class="o">(</span>NSObject <span class="k">*</span><span class="o">)</span> aObj <span class="o">=</span> 0x0000000170016350
<span class="o">(</span>lldb<span class="o">)</span> frame variable
<span class="o">(</span>GMViewController <span class="k">*</span><span class="o">)</span> self <span class="o">=</span> 0x0000000102009d20
<span class="o">(</span>SEL<span class="o">)</span> _cmd <span class="o">=</span> <span class="s2">"func"</span>
<span class="o">(</span>NSInteger<span class="o">)</span> a <span class="o">=</span> 8
<span class="o">(</span>__NSCFConstantString <span class="k">*</span><span class="o">)</span> aStr <span class="o">=</span> 0x000000010027a368 @<span class="s2">"xyzm"</span>
<span class="o">(</span>NSObject <span class="k">*</span><span class="o">)</span> aObj <span class="o">=</span> 0x0000000170016350
<span class="o">(</span>lldb<span class="o">)</span> frame variable a
<span class="o">(</span>NSInteger<span class="o">)</span> a <span class="o">=</span> 8
<span class="o">(</span>lldb<span class="o">)</span> frame variable aStr
<span class="o">(</span>__NSCFConstantString <span class="k">*</span><span class="o">)</span> aStr <span class="o">=</span> 0x000000010027a368 @<span class="s2">"xyzm"</span>
<span class="o">(</span>lldb<span class="o">)</span> frame variable aObj
<span class="o">(</span>NSObject <span class="k">*</span><span class="o">)</span> aObj <span class="o">=</span> 0x0000000170016350
</code></pre></div></div>

<h2 id="修改命令-expression">修改命令 expression</h2>

<p>程序员在自测调试的过程中，需要经常改变变量的值，以测试多种逻辑。通过改变代码的方式，需要每次打包，耗时耗力，使用 LLDB 的 expression 命令就简单了许多。在 Debug 调试的过程中，通过<code class="language-plaintext highlighter-rouge">expression 变量名=新值</code>的方式动态改变内存里面的变量。</p>

<p>例如如下代码常见，cardID 是后台返回的标识，值为 AA，执行逻辑 A；不重新打包，我们想执行逻辑 B 怎么办？在 if 逻辑判断处打断点，执行<code class="language-plaintext highlighter-rouge">exp cardID=@"BB"</code>即可修改 cardID 的值为 BB，执行逻辑 B。e 和 exp 是 expression 的简写，执行命令效果相同。</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">func</span><span class="p">{</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">cardID</span> <span class="o">=</span> <span class="s">@"AA"</span><span class="p">;</span>
<span class="k">if</span> <span class="p">([</span><span class="n">cardID</span> <span class="nf">isEqualToString</span><span class="p">:</span><span class="s">@"AA"</span><span class="p">])</span> <span class="p">{</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@"执行逻辑 A"</span><span class="p">);</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@"执行逻辑 B"</span><span class="p">);</span>
<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>执行 exp 命令，修改 cardID 的值：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>lldb<span class="o">)</span> v cardID
<span class="o">(</span>__NSCFConstantString <span class="k">*</span><span class="o">)</span> cardID <span class="o">=</span> 0x00000001002023a8 @<span class="s2">"AA"</span>
<span class="o">(</span>lldb<span class="o">)</span> exp <span class="nv">cardID</span><span class="o">=</span>@<span class="s2">"BB"</span>
<span class="o">(</span>NSTaggedPointerString <span class="k">*</span><span class="o">)</span> <span class="nv">$0</span> <span class="o">=</span> 0xa000000000042422 @<span class="s2">"BB"</span>
<span class="o">(</span>lldb<span class="o">)</span> v cardID
<span class="o">(</span>NSTaggedPointerString <span class="k">*</span><span class="o">)</span> cardID <span class="o">=</span> 0xa000000000042422 @<span class="s2">"BB"</span>
</code></pre></div></div>

<p>当然，expression 作用不仅如此，例如新建对象，修改界面，调用函数等等。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>lldb<span class="o">)</span> exp <span class="o">[</span>self.view setBackgroundColor:[UIColor lightGrayColor]]<span class="p">;</span>
<span class="o">(</span>lldb<span class="o">)</span> exp <span class="o">[</span>self.view setBackgroundColor:[UIColor greenColor]]<span class="p">;</span>
<span class="o">(</span>lldb<span class="o">)</span> exp @import UIKit
<span class="o">(</span>lldb<span class="o">)</span> exp <span class="o">(</span>void<span class="o">)[</span>self testFunc]
<span class="o">(</span>lldb<span class="o">)</span> exp <span class="nb">id</span> <span class="nv">$vc</span> <span class="o">=</span> <span class="o">[</span>UIViewController new]
<span class="o">(</span>lldb<span class="o">)</span> exp <span class="o">(</span>void<span class="o">)[[</span><span class="nv">$vc</span> view] setBackgroundColor:[UIColor yellowColor]]
</code></pre></div></div>

<h2 id="设置条件断点-watchpoint">设置条件断点 watchpoint</h2>

<p>调试的过程中，可能要持续监测某一变量，例如 for 循环 100 次，我们需要在第 50 次断点，我们在 for 循环内部打一个断点。</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
<span class="c1">// 循环内部任意执行逻辑</span>
<span class="n">NSInteger</span> <span class="n">temp</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
<span class="n">temp</span> <span class="o">=</span> <span class="mi">51</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>监测变量 i 的值，在 i=50 的时候停止执行。执行<code class="language-plaintext highlighter-rouge">watch set v i</code>和<code class="language-plaintext highlighter-rouge"> watchpoint modify -c '(i==50)'</code>即可。其中<code class="language-plaintext highlighter-rouge">watch set v i</code>是<code class="language-plaintext highlighter-rouge">watchpoint set variable i</code>的简写。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>lldb<span class="o">)</span> watch <span class="nb">set </span>v i
Watchpoint created: Watchpoint 1: addr <span class="o">=</span> 0x16fd45958 size <span class="o">=</span> 8 state <span class="o">=</span> enabled <span class="nb">type</span> <span class="o">=</span> w
<span class="nb">declare</span> @ <span class="s1">'/Users/lifei/Desktop/GitHub/GMObjC/Example/GMObjC/GMViewController.m:84'</span>
watchpoint spec <span class="o">=</span> <span class="s1">'i'</span>
new value: 0

<span class="o">(</span>lldb<span class="o">)</span> watchpoint modify <span class="nt">-c</span> <span class="s1">'(i==50)'</span>

Watchpoint 1 hit:
old value: 0
new value: 50

</code></pre></div></div>

<p>其实，还有更简单的方法，Xcode 很强大，在断点上右键选择 Edit Breakpoint…，然后在 Condition 输入框输入 i==50 即可。</p>

<h2 id="其他命令">其他命令</h2>

<p>列举其他一些不太常用的命令，例如 image、thread 等，作为了解。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>frame info                       当前的行数和源码文件，以及其他一些信息
thread backtrace all             查看所有线程调用栈
thread list                      列出所有线程
thread <span class="k">return</span> &lt;exp&gt;              可用来控制程序流程, 伪造返回值
image list                       查看工程中使用的库
image lookup <span class="nt">--address</span> 0x0000000100004af8   最后为栈地址
breakpoint <span class="nb">set</span> <span class="nt">--file</span> foo.c <span class="nt">--line</span> 12       在程序 foo.c 的第 12 行设置断点
image lookup <span class="nt">--type</span> NSURL        image lookup命令来查看具体的类型
lldb ~/Desktop/App.app           在命令行中可执行 lldb 命令加载 app
run                              启动程序，app 需要支持 x86 模拟器
q                                退出lldb
</code></pre></div></div>

<h2 id="参考链接">参考链接</h2>

<p><a href="https://lldb.llvm.org/index.html">The LLDB Debugger</a></p>
:ET